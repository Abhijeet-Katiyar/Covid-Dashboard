install.packages("sqldf")
install.packages("sqldf")
import sqldf
library('sqldf')
install.packages("sqldf")
library('sqldf')
install.packages("sqldf")
library("sqldf")
library(sqldf)
library(sqldf)
refunds<-read.csv("E:/Accenture/refunds")
refunds<-read.csv("E:/Accenture/refunds.csv")
transactions<-read.csv("E:/Accenture/transactions.csv")
transactions.head(5)
head(transactions)
library("sqldf", lib.loc="~/R/win-library/3.4")
remove.packages("sqldf", lib="~/R/win-library/3.4")
install.packages("sqldf")
library("sqldf", lib.loc="~/R/win-library/3.4")
install.packages("RSQLite")
library("RSQLite", lib.loc="~/R/win-library/3.4")
detach("package:sqldf", unload=TRUE)
library("sqldf", lib.loc="~/R/win-library/3.4")
detach("package:RSQLite", unload=TRUE)
detach("package:sqldf", unload=TRUE)
library("sqldf", lib.loc="~/R/win-library/3.4")
library("RSQLite", lib.loc="~/R/win-library/3.4")
detach("package:sqldf", unload=TRUE)
library("sqldf", lib.loc="~/R/win-library/3.4")
detach("package:sqldf", unload=TRUE)
library("sqldf", lib.loc="~/R/win-library/3.4")
detach("package:sqldf", unload=TRUE)
detach("package:RSQLite", unload=TRUE)
library("RSQLite", lib.loc="~/R/win-library/3.4")
library("sqldf", lib.loc="~/R/win-library/3.4")
detach("package:RSQLite", unload=TRUE)
detach("package:sqldf", unload=TRUE)
library("sqldf", lib.loc="~/R/win-library/3.4")
detach("package:sqldf", unload=TRUE)
library(remotes)
library("RSQLite", lib.loc="~/R/win-library/3.4")
detach("package:RSQLite", unload=TRUE)
install.packages("blob")
library("RSQLite", lib.loc="~/R/win-library/3.4")
detach("package:RSQLite", unload=TRUE)
remove.packages(sqldf)
pwd
install.packages(c("bit", "bit64", "chron", "digest", "ellipsis", "glue", "Rcpp", "rlang", "RSQLite", "vctrs"))
remove.packages("sqldf", lib="~/R/win-library/3.4")
install.packages("sqldf")
library("RSQLite", lib.loc="~/R/win-library/3.4")
library("sqldf", lib.loc="~/R/win-library/3.4")
library("sqldf", lib.loc="~/R/win-library/3.4")
detach("package:sqldf", unload=TRUE)
library("RSQLite", lib.loc="~/R/win-library/3.4")
install.packages("blob")
library("sqldf", lib.loc="~/R/win-library/3.4")
library("RSQLite", lib.loc="~/R/win-library/3.4")
install.packages("gsubfn")
install.packages("proto")
uninstall.packages("sqldf")
library("RSQLite", lib.loc="~/R/win-library/3.4")
library("sqldf", lib.loc="~/R/win-library/3.4")
library("vctrs", lib.loc="~/R/win-library/3.4")
library("ellipsis", lib.loc="~/R/win-library/3.4")
library("glue", lib.loc="~/R/win-library/3.4")
detach("package:ellipsis", unload=TRUE)
detach("package:glue", unload=TRUE)
detach("package:gsubfn", unload=TRUE)
detach("package:proto", unload=TRUE)
detach("package:RSQLite", unload=TRUE)
detach("package:sqldf", unload=TRUE)
detach("package:vctrs", unload=TRUE)
R.version.string
library("sqldf", lib.loc="~/R/win-library/3.4")
update.packages()
install.packages("installr")
install.packages("installr")
library(installr)
library(sqldf)
transactions<-read.csv("E:/Accenture/transactions.csv")
refunds<-read.csv("E:/Accenture/refunds.csv")
Transactions<-read.csv.sql("E:/Accenture/transactions.csv")
Refunds<-read.csv.sql("E:/Accenture/refunds.csv")
Transactions<-read.csv.sql("E:/Accenture/transactions.csv")
Refunds<-read.csv.sql("E:/Accenture/refunds.csv")
Transactions<-read.csv.sql("E:/Accenture/transactions.csv")
sqldf("select * from Refunds")
library(sqldf)
transactions<-read.csv("E:/Accenture/transactions.csv")
refunds<-read.csv("E:/Accenture/refunds.csv")
Transactions<-read.csv.sql(transactions)
Refunds<-read.csv.sql(refunds)
sqldf("select * from Refunds")
help("sample")
help("norm")
help("rnorm")
rnorm(20, mean = 2, sd = 2)
set.seed(34)
v <- rnorm(20,mean=2, sd=2)
m <- matrix(rnorm(20, mean = 2, sd = 2), nrow = 4, ncol = 5, byrow = TRUE)
m
length(which(m<2))
which(m<2)
m[which(m<2)]
N = duplicate(m, shallow = FALSE)
N = duplicated.matrix(m)
N[1] = 0
m
N = duplicated.matrix(m)
N[N %in% which(m<2)] <- 0
N
N = duplicated.matrix(m)
N <- duplicated.matrix(m)
N
m
N <- duplicated.matrix(m)
N
N <- duplicated(m)
N
N <- m[:]
N <- m[,]
N
k <- N[0]
N[0] <- -15
m
N
N[N %in% which(m<2)] <- 0
N
N = N[N %in% which(m<2)] <- 0
N
N <- m[,]
N <- N[N %in% which(m<2)] <- 0
N
N <- m[,]
N
N[N < 2] <- 0
N
Q <- m[,]
Q[1,3]
Q[[,1],[,3]]
Q[,c(1,3)]
Q[,c(1,3) < 2] <- 0
Q
Q <- m[,]
Q[Q[,c(1,3)] < 2] <- 0
Q
Q=m[,]
Q
Q[Q[,c(1,3)]][Q[,c(1,3)] <2 ] <- 0
Q[Q[,c(1,3)]][Q[,c(1,3)]]
Q
Q[Q[,c(1,3)] < 2]
Q[Q[,c(1,3)]]
Q[1,3]
Q[,c(1,3)]
Q[,c(1,3)] < 2
Q[Q[,c(1,3)] < 2]
Q[,c(1,3)][,c(1,3)] < 2
Q[,][,c(1,3)] < 2
Q[Q[,c(1,3)]] < 2
Q[Q[,c(1,3)] < 2]
Q[Q[,c(1,3)]] <2
Q[,c(1,3)] <2
help("replace")
replace(Q,c(1,3),0)
Q
replace(Q,Q[,c(1,3)],0)
replace(Q,[,c(1,3)],0)
replace(Q,which(Q[,c(1,3) < 2]),0)
replace(Q,Q[,c(1,3) < 2],0)
Q <- ifelse(Q[,c(1,3)]<2,0,Q)
Q
Q <- m[,]
help("ifelse")
Q[Q %<% 2] <- 0
Q[1,1]
Q[2,1]
Q[1,2]
Q[1,2] < 2
Q[,2] < 2
Q[,c(1,3)]
Q[Q[,c(1,3)]]
Q[,[which(QC(1,3)<2)]
Q[,[which(QC(1,3)<2)]]
Q[,which(QC(1,3)<2)]
Q[,which(Q[c(1,3)<2)]]
Q[which(Q[c(1,3)<2)]]
Q[which(Q[,c(1,3)]<2)]
which(Q[,c(1,3)]<2)
Q
Q[Q[,c(1,3)] <2 ]
Q[Q[,c(1,3)] < 2]
Q[Q[,c(1,3)] < 2]
Q[Q[,c(1,3)] < 1]
Q[Q[,c(1,3)] < 0]
Q[,c(1,3)] < 0
Q[Q[,c(1,3)] < 0]
Q[,Q[,c(1,3)] < 2]
Q[,c(1,3)] < 2
Q[Q[c(1,3)] < 2]
Q[Q[,c(1,3)] < 2]
for i in seq(4):
for( i in seq(4)){}
for( i in seq(4)){
for(j in c(1,3){
if(m[i,j]<2){
m[i,j] <- 0}
}
}
Q[Q[,c(1,3)] > 2]
Q[Q[,c(1,3)] < 2]
Q[,c(Q[,c(1,3)] < 2)]
Q[,c(Q[,c(1,3)] < 2)]
traceback()
bool_seq <- Q[,c(1,3)] < 2
bool_seq
Q[,c(bool_seq)]
Q[,bool_seq]
Q[,c(1,3)]
Q[,c(1,3)][bool_seq]
Q[,c(1,3)][bool_seq] <- 0
Q
Q <- m[,]
Q[,c(1,3)][Q[,c(1,3)] < 2] <- 0
Q
Q
help("cbind")
cbind(Q,c(1,2,3,4))
print(m)
shiny::runApp('D:/LockDown/Covid19')
shiny::runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
library(shiny)
library(plotly)
library(tidyverse)
library(ggplot2)
library(scales)
source("preprocessing.R")
getwd()
setwd("D:/Learning shiny/CovidIndia")
source("preprocessing.R")
setwd("D:/Learning shiny/CovidIndia/CovidIndia")
source("preprocessing.R")
data <- read_csv("covid_19_india.csv")
data <- clean(data)
data$Date <- as.Date(data$Date,format = "%d-%m-%Y")
source("preprocessing.R")
data <- read_csv("covid_19_india.csv")
data <- clean(data)
runApp()
runApp()
runApp()
runApp()
setwd("D:/Learning shiny/Covid19")
runApp()
runApp()
runApp()
install.packages("shinythemes")
unique(data[,"StateAndUnionTerritories"])
distinct(data,StateAndUnionTerritories)
list(distinct(data,StateAndUnionTerritories))
list(unique(data[,"StateAndUnionTerritories"]))
unique(data$StateAndUnionTerritories)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
filter(data,Date >= "19-05-2020" | Date <= "31-08-2020")
filter(data,Date >= "19-05-2020" | Date <= "31-08-2020" & StateAndUnionTerritories = "Uttar Pradesh")
filter(data,Date >= "19-05-2020" | Date <= "31-08-2020" & StateAndUnionTerritories == "Uttar Pradesh")
filter(data,Date >= "19-05-2020" & Date <= "31-08-2020" & StateAndUnionTerritories == "Uttar Pradesh")
View(data)
source("DataPreprocessing.R")
data <- read_csv("covid_19_india.csv")
data <- clean(data)
View(data)
filter(data,Date >= "19-05-2020" & Date <= "31-08-2020" & StateAndUnionTerritories == "Uttar Pradesh")
runApp()
runApp()
runApp()
runApp()
install.packages("gganimate")
library(gganimate)
runApp()
library(gganimate)
ggplotly(
filter(data,StateAndUnionTerritories == input$state) %>%
ggplot(aes_string(x = "Date", y = results()[1], group = "1")) +
geom_area(fill=results()[3], alpha=0.5) +
geom_line(color=results()[3]) +
ylab(results()[4]) +
scale_x_date(date_breaks = "4 weeks", date_labels = "%b-%Y") +
theme(axis.text.x = element_text(angle=90))
) + transition_reveal(Date)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
