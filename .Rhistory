Q[,c(1,3)]
Q[,c(1,3) < 2] <- 0
Q
Q <- m[,]
Q[Q[,c(1,3)] < 2] <- 0
Q
Q=m[,]
Q
Q[Q[,c(1,3)]][Q[,c(1,3)] <2 ] <- 0
Q[Q[,c(1,3)]][Q[,c(1,3)]]
Q
Q[Q[,c(1,3)] < 2]
Q[Q[,c(1,3)]]
Q[1,3]
Q[,c(1,3)]
Q[,c(1,3)] < 2
Q[Q[,c(1,3)] < 2]
Q[,c(1,3)][,c(1,3)] < 2
Q[,][,c(1,3)] < 2
Q[Q[,c(1,3)]] < 2
Q[Q[,c(1,3)] < 2]
Q[Q[,c(1,3)]] <2
Q[,c(1,3)] <2
help("replace")
replace(Q,c(1,3),0)
Q
replace(Q,Q[,c(1,3)],0)
replace(Q,[,c(1,3)],0)
replace(Q,which(Q[,c(1,3) < 2]),0)
replace(Q,Q[,c(1,3) < 2],0)
Q <- ifelse(Q[,c(1,3)]<2,0,Q)
Q
Q <- m[,]
help("ifelse")
Q[Q %<% 2] <- 0
Q[1,1]
Q[2,1]
Q[1,2]
Q[1,2] < 2
Q[,2] < 2
Q[,c(1,3)]
Q[Q[,c(1,3)]]
Q[,[which(QC(1,3)<2)]
Q[,[which(QC(1,3)<2)]]
Q[,which(QC(1,3)<2)]
Q[,which(Q[c(1,3)<2)]]
Q[which(Q[c(1,3)<2)]]
Q[which(Q[,c(1,3)]<2)]
which(Q[,c(1,3)]<2)
Q
Q[Q[,c(1,3)] <2 ]
Q[Q[,c(1,3)] < 2]
Q[Q[,c(1,3)] < 2]
Q[Q[,c(1,3)] < 1]
Q[Q[,c(1,3)] < 0]
Q[,c(1,3)] < 0
Q[Q[,c(1,3)] < 0]
Q[,Q[,c(1,3)] < 2]
Q[,c(1,3)] < 2
Q[Q[c(1,3)] < 2]
Q[Q[,c(1,3)] < 2]
for i in seq(4):
for( i in seq(4)){}
for( i in seq(4)){
for(j in c(1,3){
if(m[i,j]<2){
m[i,j] <- 0}
}
}
Q[Q[,c(1,3)] > 2]
Q[Q[,c(1,3)] < 2]
Q[,c(Q[,c(1,3)] < 2)]
Q[,c(Q[,c(1,3)] < 2)]
traceback()
bool_seq <- Q[,c(1,3)] < 2
bool_seq
Q[,c(bool_seq)]
Q[,bool_seq]
Q[,c(1,3)]
Q[,c(1,3)][bool_seq]
Q[,c(1,3)][bool_seq] <- 0
Q
Q <- m[,]
Q[,c(1,3)][Q[,c(1,3)] < 2] <- 0
Q
Q
help("cbind")
cbind(Q,c(1,2,3,4))
print(m)
shiny::runApp('D:/LockDown/Covid19')
library(dplyr)
library(ggplot2)
df <- read.csv("covid_19_india.csv")
setwd("D:/Learning Shiny/Covid19")
df <- read.csv("covid_19_india.csv")
df$daily_cured <- ave(df$Cured, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
df$daily_deaths <- ave(df$Deaths, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
df$daily_confirmed <- ave(df$Confirmed, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
colnames(df) <- c("Date","State.UnionTerritory","Cured","Deaths","Confirmed","daily_cured","daily_deaths","daily_confirmed")
df$Date <- as.Date(df$Date, format = "%d-%m-%Y")
unique(df$State.UnionTerritory)
df <- df %>%
mutate(State.UnionTerritory = case_when(
State.UnionTerritory %in% c("Karanatka", "Karnataka") ~ "Karnataka",
State.UnionTerritory %in% c("Telangana", "Telengana") ~ "Telengana",
State.UnionTerritory %in% c("Himanchal Predesh", "Himachal Pradesh") ~ "Himachal Pradesh",
TRUE ~ State.UnionTerritory
)
)
df <- df[!(df$State.UnionTerritory == "Unassigned" | df$State.UnionTerritory == "Cases being reassigned to states" |
df$State.UnionTerritory == "Daman & Diu" | df$State.UnionTerritory == "Dadra and Nagar Haveli"),]
ggplot(data = df[df$State.UnionTerritory == "Andaman and Nicobar Islands",], aes(x = Date, y = daily_confirmed)) + geom_line(stat="identity") +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = df[df$State.UnionTerritory == "Andaman and Nicobar Islands",], aes(x = Date, y = daily_confirmed)) + geom_line(stat="identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Reading data
View(df)
library(plotly)
p <- df[df$State.UnionTerritory == "Andaman and Nicobar Islands",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p <- ggplotly(p)
p
p <- ggplotly() %>% df[df$State.UnionTerritory == "Andaman and Nicobar Islands",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p <-  df[df$State.UnionTerritory == "Andaman and Nicobar Islands",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p <- ggplotly %>% df[df$State.UnionTerritory == "Andaman and Nicobar Islands",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p <- ggplotly(df[df$State.UnionTerritory == "Andaman and Nicobar Islands",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)))
#p <- ggplotly(p)
p
shiny::runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
library(dplyr)
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
plt <-df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill=colr, alpha=0.5) +
geom_line(color=colr) +
ylab("Daily Confirmed Cases")
plt <-df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases")
plt
plt <-df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#a81d1d", alpha=0.5) +
geom_line(color="#a81d1d") +
ylab("Daily Confirmed Cases")
plt
plt <-df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#b39e69", alpha=0.5) +
geom_line(color="#b39e69") +
ylab("Daily Confirmed Cases")
plt
#a81d1d
#a81d1d
#a81d1d
plt <-df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#a81d1d", alpha=0.5) +
geom_line(color="#a81d1d") +
ylab("Daily Confirmed Cases")
plt
plt <-df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_line(color="#a81d1d") +
ylab("Daily Confirmed Cases")
plt
geom_area(fill="#a81d1d", alpha=0.5) +
plt <-df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#a81d1d", alpha=0.5) +
geom_line(color="#a81d1d") +
ylab("Daily Confirmed Cases")
plt <-df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#a81d1d", alpha=0.5) +
geom_line(color="#a81d1d") +
ylab("Daily Confirmed Cases")
plt
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
library(shiny)
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
sum(is.null(df))
sum(is.null(df[1]))
sum(is.null(df[2]))
sum(is.null(df[3]))
sum(is.null(df[0]))
sum(is.null(df[4]))
sum(is.null(df[5]))
sum(is.null(df[6]))
sum(is.null(df[7]))
sum(is.null(df[8]))
sum(is.null(df[15805456
]))
sum(is.null(df[9]))
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# choice <- reactive(input$condition)
# if(choice == reactive("Confirmed")) {
#     cumulative_y <- reactive("Confirmed")
#     cum_ylab <- reactive("Cumulative Confirmed Cases")
#     daily_y <- reactive("daily_confirmed")
#     daily_ylab <- reactive("daily Confirmed Cases")
#     colr <- reactive("#b39e69")
#
# } else if(choice == reactive("Deaths")) {
#     cumulative_y <- reactive("Deaths")
#     cum_ylab <- reactive("Cumulative Deaths")
#     daily_y <- reactive("daily_deaths")
#     daily_ylab <- reactive("daily Deaths")
#     colr <- reactive("#a81d1d")
# } else if(choice == reactive("Cured")) {
#     cumulative_y <- reactive("Cured")
#     cum_ylab <- reactive("Cumulative Cured")
#     daily_y <- reactive("daily_cured")
#     daily_ylab <- reactive("daily Cured")
#     colr <- reactive("#69b3a2")
# }
#
results <- reactive({
if(input$choice == "Confirmed") {
results <- c("daily_confirmed","Confirmed","#b39e69","Daily Confirmed Cases","Cumulative Confirmed Cases")
}
else if(input$choice == "Deaths") {
results <- c("daily_deaths","Deaths","#a81d1d","Daily Deaths","Cumulative Deaths")
}
else if(input$choice == "Cured") {
results <- c("daily_cured","Cured","#69b3a2","Daily Cured","Cumulative Cured")
}
})
output$dailyPlot <- renderPlot({
df[df$State.UnionTerritory == input$state,] %>%
ggplot(aes(x = Date, y = results()[1])) +
geom_area(fill=results()[3], alpha=0.5) +
geom_line(color=results()[3]) +
ylab(results()[4])
})
output$cumulativePlot <- renderPlot({
df[df$State.UnionTerritory == input$state,] %>%
ggplot(aes(x = Date, y = results()[2])) +
geom_line(color=results()[3]) +
ylab(results()[5])
})
})
results <- reactive({
if(input$choice == "Confirmed") {
results <- c("daily_confirmed","Confirmed","#b39e69","Daily Confirmed Cases","Cumulative Confirmed Cases")
}
else if(input$choice == "Deaths") {
results <- c("daily_deaths","Deaths","#a81d1d","Daily Deaths","Cumulative Deaths")
}
else if(input$choice == "Cured") {
results <- c("daily_cured","Cured","#69b3a2","Daily Cured","Cumulative Cured")
}
})
isolate(results)
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
df[df$daily_confirmed < 0,]
view(df[df$daily_confirmed < 0,])
View(df[df$daily_confirmed < 0,])
length(df[df$daily_confirmed < 0,])
length(df[df$daily_cured < 0,])
length(df[df$daily_deaths < 0,])
df <- df[!(df$daily_confirmed <0 | df$daily_deaths <0 | df$daily_cured <0),]
p <- ggplotly(df[df$State.UnionTerritory == "Andaman and Nicobar Islands",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)))
#p <- ggplotly(p)
p
plt <-df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#a81d1d", alpha=0.5) +
geom_line(color="#a81d1d") +
ylab("Daily Confirmed Cases")
plt
ylab("Daily Confirmed Cases") +
#p <- ggplotly(p)
p
ylab("Daily Confirmed Cases")
#p <- ggplotly(p)
p
ggplot(aes(x = Date, y = daily_confirmed)) +
p <- ggplotly(df[df$State.UnionTerritory == "Andaman and Nicobar Islands",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases"))
#p <- ggplotly(p)
p
p <- ggplotly(df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases"))
#p <- ggplotly(p)
p
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
library(ggplot2)
df[df$State.UnionTerritory == input$state,] %>%
ggplot(aes(x = Date, y = "Maharashtra")) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("results()[4]")
df[df$State.UnionTerritory == "Maharashtra",] %>%
ggplot(aes(x = Date, y = "Confirmed")) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("results()[4]")
df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases")
df[df$State.UnionTerritory == "Maharashtra",] %>%
ggplot(aes(x = Date, y = Confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("results()[4]")
df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = df$daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases")
df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases")
df[df$State.UnionTerritory == "Maharashtra",] %>%
ggplot(aes(x = Date, y = as.name("Confirmed"))) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("results()[4]")
df[df$State.UnionTerritory == "Maharashtra",] %>%
ggplot(aes(x = Date, y = df[["Confirmed"]])) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("results()[4]")
df[df$State.UnionTerritory == "Maharashtra",] %>%
ggplot(aes_string(x = Date, y = "Confirmed")) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("results()[4]")
df[df$State.UnionTerritory == "Maharashtra",] %>%
ggplot(aes_string(x = "Date", y = "Confirmed")) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("results()[4]")
df[df$State.UnionTerritory == input$state,] %>%
ggplot(aes_string(x = Date, y = results()[2])) +
geom_line(color=results()[3]) +
ylab(results()[5])
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
#setwd("D:/Learning Shiny/Covid19")
df <- read_csv("covid_19_india.csv")
df$daily_cured <- ave(df$Cured, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
df$daily_deaths <- ave(df$Deaths, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
runApp('D:/Learning shiny/Covid19')
df$daily_confirmed <- ave(df$Confirmed, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
colnames(df) <- c("Date","State.UnionTerritory","Cured","Deaths","Confirmed","daily_cured","daily_deaths","daily_confirmed")
unique(df$State.UnionTerritory)
df <- df %>%
mutate(State.UnionTerritory = case_when(
State.UnionTerritory %in% c("Karanatka", "Karnataka") ~ "Karnataka",
State.UnionTerritory %in% c("Telangana", "Telengana") ~ "Telengana",
State.UnionTerritory %in% c("Himanchal Predesh", "Himachal Pradesh") ~ "Himachal Pradesh",
TRUE ~ State.UnionTerritory
)
)
df <- df[!(df$State.UnionTerritory == "Unassigned" | df$State.UnionTerritory == "Cases being reassigned to states" |
df$State.UnionTerritory == "Daman & Diu" | df$State.UnionTerritory == "Dadra and Nagar Haveli"),]
source("D:/Learning shiny/Covid19/DataPreprocessing.R", echo=TRUE)
library(dplyr)
library(ggplot2)
getwd
getwd()
library(dplyr)
library(ggplot2)
library(plotly)
#setwd("D:/Learning Shiny/Covid19")
df <- read_csv("covid_19_india.csv")
df$daily_cured <- ave(df$Cured, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
#setwd("D:/Learning Shiny/Covid19")
df <- read_csv("covid_19_india.csv")
df$daily_cured <- ave(df$Cured, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyverse)
#setwd("D:/Learning Shiny/Covid19")
df <- read_csv("covid_19_india.csv")
df$daily_cured <- ave(df$Cured, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
df$daily_deaths <- ave(df$Deaths, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
df <- data.frame(df)
df$daily_cured <- ave(df$Cured, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
df$daily_deaths <- ave(df$Deaths, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
df$daily_confirmed <- ave(df$Confirmed, df$State.UnionTerritory, FUN = function(x) c(x[1],diff(x)))
colnames(df) <- c("Date","State.UnionTerritory","Cured","Deaths","Confirmed","daily_cured","daily_deaths","daily_confirmed")
unique(df$State.UnionTerritory)
df <- df %>%
mutate(State.UnionTerritory = case_when(
State.UnionTerritory %in% c("Karanatka", "Karnataka") ~ "Karnataka",
State.UnionTerritory %in% c("Telangana", "Telengana") ~ "Telengana",
State.UnionTerritory %in% c("Himanchal Predesh", "Himachal Pradesh") ~ "Himachal Pradesh",
TRUE ~ State.UnionTerritory
)
)
df <- df[!(df$State.UnionTerritory == "Unassigned" | df$State.UnionTerritory == "Cases being reassigned to states" |
df$State.UnionTerritory == "Daman & Diu" | df$State.UnionTerritory == "Dadra and Nagar Haveli"),]
df <- df[!(df$daily_confirmed <0 | df$daily_deaths <0 | df$daily_cured <0),]
p <- ggplotly(df[df$State.UnionTerritory == "Uttar Pradesh",] %>%
ggplot(aes(x = Date, y = daily_confirmed)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("Daily Confirmed Cases"))
#p <- ggplotly(p)
p
runApp('D:/Learning shiny/Covid19')
runApp('D:/Learning shiny/Covid19')
source("D:/Learning shiny/Covid19/DataPreprocessing.R", echo=TRUE)
runApp('D:/Learning shiny/Covid19')
